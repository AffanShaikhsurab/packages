diff --git a/packages/go_router/lib/src/misc/extensions.dart b/packages/go_router/lib/src/misc/extensions.dart
index c1c522765..0bf2e1277 100644
--- a/packages/go_router/lib/src/misc/extensions.dart
+++ b/packages/go_router/lib/src/misc/extensions.dart
@@ -16,11 +16,14 @@ extension GoRouterHelper on BuildContext {
     String name, {
     Map<String, String> pathParameters = const <String, String>{},
     Map<String, dynamic> queryParameters = const <String, dynamic>{},
-    String? fragment, 
+    String? fragment,
   }) =>
-    /// If a fragment is provided, it appends it to the route name with a "#" symbol, otherwise, it returns the name as is.
-      GoRouter.of(this).namedLocation(fragment == null?name:'$name#$fragment',
-          pathParameters: pathParameters, queryParameters: queryParameters);
+
+      /// If a fragment is provided, it appends it to the route name with a "#" symbol, otherwise, it returns the name as is.
+      GoRouter.of(this).namedLocation(
+          fragment == null ? name : '$name#$fragment',
+          pathParameters: pathParameters,
+          queryParameters: queryParameters);
 
   /// Navigate to a location.
   void go(String location, {Object? extra}) =>
@@ -32,7 +35,7 @@ extension GoRouterHelper on BuildContext {
     Map<String, String> pathParameters = const <String, String>{},
     Map<String, dynamic> queryParameters = const <String, dynamic>{},
     Object? extra,
-    String? fragment, 
+    String? fragment,
   }) =>
       GoRouter.of(this).goNamed(
         name,
diff --git a/packages/go_router/lib/src/route.dart b/packages/go_router/lib/src/route.dart
index 247526d99..940279dc9 100644
--- a/packages/go_router/lib/src/route.dart
+++ b/packages/go_router/lib/src/route.dart
@@ -277,7 +277,7 @@ class GoRoute extends RouteBase {
         assert(onExit == null || pageBuilder != null || builder != null,
             'if onExit is provided, one of pageBuilder or builder must be provided'),
         super._() {
-      // cache the path regexp and parameters
+    // cache the path regexp and parameters
     _pathRE = patternToRegExp(path, pathParameters);
   }
 
@@ -323,7 +323,7 @@ class GoRoute extends RouteBase {
   ///
   /// See the [named routes example](https://github.com/flutter/packages/blob/main/packages/go_router/example/lib/named_routes.dart)
   /// for a complete runnable app.
- final String? name;
+  final String? name;
 
   /// The path of this go route.
   ///
@@ -432,9 +432,9 @@ class GoRoute extends RouteBase {
   final String? fragment;
 
   /// The optional fragment/hash component of the route.
-  /// 
-  /// This field allows specifying a fragment that will be appended to the route's URI, enabling navigation to a specific section within a page. If not provided, the URI will not include a fragment. 
-  /// 
+  ///
+  /// This field allows specifying a fragment that will be appended to the route's URI, enabling navigation to a specific section within a page. If not provided, the URI will not include a fragment.
+  ///
   /// Example usage:
   /// ```dart
   /// GoRouterState.of(context).namedLocation(
@@ -448,15 +448,15 @@ class GoRoute extends RouteBase {
 
   late final RegExp _pathRE;
 
-
   // TODO(chunhtai): move all regex related help methods to path_utils.dart.
   /// Match this route against a location.
   RegExpMatch? matchPatternAsPrefix(String loc) =>
       _pathRE.matchAsPrefix(loc) as RegExpMatch?;
-      
+
   /// Extract the path parameters from a match.
   Map<String, String> extractPathParams(RegExpMatch match) =>
       extractPathParameters(pathParameters, match);
+
   /// The path parameters in this route.
   @internal
   final List<String> pathParameters = <String>[];
@@ -470,6 +470,7 @@ class GoRoute extends RouteBase {
         FlagProperty('redirect', value: redirectOnly, ifTrue: 'Redirect Only'));
   }
 }
+
 /// Base class for classes that act as shells for sub-routes, such
 /// as [ShellRoute] and [StatefulShellRoute].
 abstract class ShellRouteBase extends RouteBase {
diff --git a/packages/go_router/lib/src/router.dart b/packages/go_router/lib/src/router.dart
index 530257f35..8e810aaea 100644
--- a/packages/go_router/lib/src/router.dart
+++ b/packages/go_router/lib/src/router.dart
@@ -325,7 +325,8 @@ class GoRouter implements RouterConfig<RouteMatchList> {
   String namedLocation(
     String name, {
     Map<String, String> pathParameters = const <String, String>{},
-    Map<String, dynamic> queryParameters = const <String, dynamic>{}, String? fragment,
+    Map<String, dynamic> queryParameters = const <String, dynamic>{},
+    String? fragment,
   }) =>
       configuration.namedLocation(
         name,
@@ -352,32 +353,31 @@ class GoRouter implements RouterConfig<RouteMatchList> {
   /// Navigate to a named route w/ optional parameters, e.g.
   /// `name='person', pathParameters={'fid': 'f2', 'pid': 'p1'}`
   /// Navigate to the named route.
- void goNamed(
-  String name, {
-  Map<String, String> pathParameters = const <String, String>{},
-  Map<String, dynamic> queryParameters = const <String, dynamic>{},
-  Object? extra,
-  String? fragment, // Add fragment parameter
-}) {
-  // Create the base location using namedLocation
-  String location = namedLocation(
-    name,
-    pathParameters: pathParameters,
-    queryParameters: queryParameters,
-  );
-
-  // If a fragment is provided, append it to the location
-  if (fragment != null && fragment.isNotEmpty) {
-    location = '$location#$fragment';
-  }
+  void goNamed(
+    String name, {
+    Map<String, String> pathParameters = const <String, String>{},
+    Map<String, dynamic> queryParameters = const <String, dynamic>{},
+    Object? extra,
+    String? fragment, // Add fragment parameter
+  }) {
+    // Create the base location using namedLocation
+    String location = namedLocation(
+      name,
+      pathParameters: pathParameters,
+      queryParameters: queryParameters,
+    );
 
-  // Use the modified location with fragment (if any) to navigate
-  go(
-    location,
-    extra: extra,
-  );
-}
+    // If a fragment is provided, append it to the location
+    if (fragment != null && fragment.isNotEmpty) {
+      location = '$location#$fragment';
+    }
 
+    // Use the modified location with fragment (if any) to navigate
+    go(
+      location,
+      extra: extra,
+    );
+  }
 
   /// Push a URI location onto the page stack w/ optional query parameters, e.g.
   /// `/family/f2/person/p1?color=blue`.
diff --git a/packages/go_router/lib/src/state.dart b/packages/go_router/lib/src/state.dart
index 0d81be62c..c582bfa4b 100644
--- a/packages/go_router/lib/src/state.dart
+++ b/packages/go_router/lib/src/state.dart
@@ -14,7 +14,7 @@ import 'route.dart';
 /// The state contains parsed artifacts of the current URI.
 @immutable
 class GoRouterState {
-/// Default constructor for creating route state during routing.
+  /// Default constructor for creating route state during routing.
   const GoRouterState(
     this._configuration, {
     required this.uri,
@@ -158,7 +158,7 @@ class GoRouterState {
 
   /// Get a location from route name and parameters.
   /// This is useful for redirecting to a named location.
-String namedLocation(
+  String namedLocation(
     String name, {
     Map<String, String> pathParameters = const <String, String>{},
     Map<String, String> queryParameters = const <String, String>{},
@@ -170,6 +170,7 @@ String namedLocation(
       pathParameters: pathParameters,
       queryParameters: queryParameters,
     );
+
     /// If a fragment is provided and is not empty, append it to the location string with a "#" symbol.
     if (fragment != null && fragment.isNotEmpty) {
       return '$location#$fragment';